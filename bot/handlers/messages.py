from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ContentType, InlineKeyboardMarkup
from aiogram.filters import Command, StateFilter
from bot.utils.state_management import UserState
from bot.services.user_storage import user_storage
from bot.services.google_sheets import upload_photo_to_drive, append_to_sheet
from bot.handlers.keyboards import start_keyboard, callback_first_message, callback_good_opinion, callback_bad_opinion, \
    callback_bad_otziv, after_situation_kbd, share_contact_kbd, okey_kbd
import os
router = Router()

sheet_id = "1Ay3R8wGXQ51Qv6JjwvXwR8ATO8m3UFu57W0dwqT-grc"

@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await state.set_state(UserState.start)
    await message.answer('<b><i>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üòä</i></b>', reply_markup=ReplyKeyboardRemove(), parse_mode='html')
    await message.answer(
        'C–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –Ω–∞—à—É –ø—Ä–æ–¥—É–∫—Ü–∏—é.üôè\n'
        '–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤. '
        '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëâ<b>¬´–ü–†–û–î–û–õ–ñ–ò–¢–¨¬ª</b>üëà',
        reply_markup=start_keyboard(), parse_mode='html'
    )

@router.callback_query(StateFilter(UserState.start))
async def blagodar_callback(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'start_next':
        await user_storage.add_user(call.from_user.id)
        await call.message.answer(
            "–ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –º–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –æ –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º –æ —Ç–æ–≤–∞—Ä–µü§î",
            reply_markup=callback_first_message()
        )

    elif call.data == 'super':
        await user_storage.user_set_flag(call.from_user.id, True)
        await call.message.answer(
            '–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –Ω–∞—à —Ç–æ–≤–∞—Äüëå\n–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å '
            '–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—ã–≥–æ–¥–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—ÅüéÅ'
            '\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å <b>–æ—Ç–∑—ã–≤</b>üìù\n'
            '‚¨á–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫‚¨á',
            reply_markup=callback_good_opinion(), parse_mode='html'
        )

    elif call.data == 'good_otziv':
        await call.message.answer('–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤üëç\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ '
                                                  '—Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n'
                                                  '1‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB.\n'
                                                  '2‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª <b>"–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"</b>.\n'
                                                  '3‚É£ –£–±–µ–¥–∏–µ—Ç—Å—å –≤ —Ç–æ–º, —á—Ç–æ –æ—Ç–∑—ã–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç '
                                                  '–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞.\n'
                                                  '4‚É£ –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '
                                                  '<b>"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö"</b>üì¨',
                               reply_markup=callback_bad_otziv(), parse_mode='html')


    if call.data == 'bad_otziv':
        await call.message.answer('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n'
                                                     '1‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB.\n'
                                                     '2‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª <b>"–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"</b>.\n'
                                                     '3‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—à —Ç–æ–≤–∞—Ä –∏ –æ—Å—Ç–∞–≤—å—Ç–µ <b>–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤</b>.\n'
                                                     '4‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç '
                                                     '–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ <b>"–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏"</b> –≤ '
                                                     '–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n'
                                                     '5‚É£ –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '
                                                     '<b>"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö"</b>üì¨',
                               reply_markup=callback_bad_otziv(), parse_mode='html')

    elif call.data == 'bad':
        await user_storage.user_set_flag(call.from_user.id, False)
        await call.message.answer(
            '–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—Éüìù',
        )
        await state.set_state(UserState.save_situation)

    elif call.data == 'next_good':
        await call.message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∑—ã–≤–∞üì±')
        await state.set_state(UserState.enter_photo)

@router.message(UserState.save_situation)
async def after_situation(message: types.Message, state: FSMContext):
    if message.text is None:
        builder = ReplyKeyboardMarkup(resize_keyboard=True)
        builder.add(KeyboardButton(text='OK'))
        await state.set_state(UserState.start)
        await message.answer('‚õî–í –¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã‚õî', reply_markup=builder)
        return
    await user_storage.user_set_situation(message.from_user.id, message.text)
    await message.answer('–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤üòá', reply_markup=after_situation_kbd())
    await state.set_state(UserState.enter_contact)

@router.message(UserState.enter_photo, F.content_type == ContentType.PHOTO)
async def instruction1_function(message: types.Message, state: FSMContext):
    if message.content_type == ContentType.PHOTO:
        await message.answer('–§–æ—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µüîÑ')
        save_path = f'photo{message.photo[-1].file_id}.jpg'
        await user_storage.user_set_save_path(message.from_user.id, save_path)
        #await tg_bot.download_file_by_id(message.photo[-1].file_id, save_path)

        file_id = message.photo[-1].file_id
        file_info = await message.bot.get_file(file_id)
        file_path = file_info.file_path
        await message.bot.download_file(file_path, save_path)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ Google Drive
        link = await upload_photo_to_drive(save_path)
        await user_storage.user_set_screen(message.from_user.id, link)
        await state.set_state(UserState.enter_contact)
        await message.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úÖ', reply_markup=okey_kbd())
    else:
        await message.answer('‚õî–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ, –µ—â–µ —Ä–∞–∑‚õî')

@router.message(UserState.enter_photo, F.content_type != ContentType.PHOTO)
async def instruction1_function1(message: types.Message, state: FSMContext):
    await message.answer('‚õî–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ, –µ—â–µ —Ä–∞–∑‚õî')

@router.message(UserState.enter_contact)
async def call_get_phoneee(message: types.Message, state: FSMContext):
    save_path = await user_storage.user_get_save_path(message.from_user.id)
    if save_path:
        await message.bot.delete_message(message.from_user.id, message_id=message.message_id)
        os.remove(save_path)
    if not await user_storage.get_user_flag(message.from_user.id):
        if message.text is None:
            builder = ReplyKeyboardMarkup(resize_keyboard=True)
            builder.add(KeyboardButton(text='OK'))
            await state.set_state(UserState.start)
            await message.answer('‚õî–í –¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã‚õî', reply_markup=builder)
            return
    await message.answer(
        '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏üë®‚Äçüíª',
        reply_markup=share_contact_kbd()
    )
    await state.set_state(UserState.enter_name)

@router.message(UserState.enter_name, F.content_type != ContentType.CONTACT)
async def phone_number_except(message: types.Message, state: FSMContext):
    await state.set_state(UserState.enter_contact)
    await message.answer('–í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É', reply_markup=okey_kbd())


@router.message(UserState.enter_name, F.content_type == ContentType.CONTACT)
async def get_phone_mes(message: types.Message, state: FSMContext):
    if message.contact:
        await user_storage.user_set_phone(message.from_user.id, message.contact.phone_number)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Å–≤—è–∑–∏‚úã', reply_markup=ReplyKeyboardRemove())
        if not await user_storage.get_user_flag(message.from_user.id):
            await state.set_state(UserState.save_in_sheets_situation)
        else:
            await state.set_state(UserState.save_in_sheets)
    else:
        await phone_number_except(message, state)

@router.message(UserState.save_in_sheets)
async def save_in_sheets(message: types.Message, state: FSMContext):
    await user_storage.user_set_username(message.from_user.id, message.from_user.username)
    await user_storage.user_set_name(message.from_user.id, message.text)
    data = await user_storage.return_body(message.from_user.id, True)
    await append_to_sheet(sheet_id, data, "–õ–∏—Å—Ç1!A1", True)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ‚òë\n–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞')
    await user_storage.remove_user(message.from_user.id)
    await state.clear()

@router.message(UserState.save_in_sheets_situation)
async def save_in_sheets_situation(message: types.Message, state: FSMContext):
    await user_storage.user_set_username(message.from_user.id, message.from_user.username)
    await user_storage.user_set_name(message.from_user.id, message.text)
    data = await user_storage.return_body(message.from_user.id, False)
    await append_to_sheet(sheet_id, data, "–õ–∏—Å—Ç2!A1", False)
    await message.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –º–Ω–µ–Ω–∏–µ–ºüôè\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èüë®‚Äçüíª')
    await user_storage.remove_user(message.from_user.id)
    await state.clear()

